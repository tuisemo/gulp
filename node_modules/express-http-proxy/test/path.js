var express = require('express');
var request = require('supertest');
var proxy = require('../');
var startProxyTarget = require('./support/proxyTarget');

describe('uses remote path', function () {
  'use strict';

  this.timeout(10000);

  var app = express();
  it.only('does nothing', function (done) {
    var proxyRouteFn = [{
      method: 'get',
      path: '/somePath',
      fn: function(req, res) {
debugger;
        res.sendStatus(200);
      }
    }];
    startProxyTarget(8309, 1000, proxyRouteFn);
    app.use('/somePath', proxy('http://localhost:8309/other/path'));

    request(app)
      .get('/somePath/abc')
      .end(function(err) {
        debugger;
        if (err) {
          return done(err);
        }
        done();
      });
  });
//So that when I call /somePath/abc, it is proxied to http://other.server/other/path/abc?

//Right now, I have to workaround with something like:

//const proxyPath = url.parse('http://other.server/other/path').path;
//app.use('/somePath', proxy('http://other.server/other/path', {
    //proxyReqPathResolver(req) {
        //const reqPath = url.parse(req.url).path;
        //return [proxyPath, reqPath].join('/');
    //}
//}));
});


describe('host can be a dynamic function', function() {
  'use strict';

  this.timeout(10000);

  var app = express();
  var firstProxyApp = express();
  var secondProxyApp = express();
  var firstPort = 10031;
  var secondPort = 10032;

  app.use('/proxy/:port', proxy(function(req) {
    return 'localhost:' + req.params.port;
  }, {
    memoizeHost: false
  }));

  firstProxyApp.use('/', function(req, res) {
    res.sendStatus(204);
  });
  firstProxyApp.listen(firstPort);

  secondProxyApp.use('/', function(req, res) {
    res.sendStatus(200);
  });
  secondProxyApp.listen(secondPort);

  it('can proxy with session value', function(done) {
    request(app)
      .get('/proxy/' + firstPort)
      .expect(204)
      .end(function(err) {
        if (err) {
          return done(err);
        }
        request(app)
            .get('/proxy/' + secondPort)
            .expect(200, done);
      });
  });
});
